# Reads the <experiment_name>_domEQUids.dat file and generates the 
# analyze script which will produce the lineages for those ids.
#
# The analyze script is called analyze-lin-<experiment_name>.cfg and ends up 
# in the config folder next to the avida executable.
#
# BLW
# 8-1-11

from argparse import ArgumentParser
import os.path
import sys

# Set up parser -- useful for help message.
parser = ArgumentParser(description = "Given an experiment name, reads the associated _domEQUids.dat file and generates an analyze file which will produce lineages for all the ids listed in that file.")

parser.add_argument("experiment_name", help = "The name of the experiment, i.e. unlimited-base")

args = parser.parse_args()
args = vars(args) # turn Namespace into dictionary

experiment_name = args["experiment_name"]
analyze_name = "analyze-lin-" + experiment_name + ".cfg"

# Determine filename and check for its existence
idfile_name = experiment_name + "_domEQUids.dat"

if not os.path.exists(idfile_name):
	print "Error: " + idfile_name + " does not exist.  Please run Avida in analyze mode with the analyze-domEQUid.cfg analyze script."
	sys.exit()

# Check for the existence of the config directory
if not os.path.exists("config"):
	print "Cannot find config directory; placing " + analyze_name + " in the current directory."
else:
	analyze_name = "config/" + analyze_name

# Read id file, associating seed/batch id with genotype id
pairs = []

fd = open(idfile_name, "r")
for line in fd:
	line = line.strip()
	if len(line) == 0 or line[0] == "#":
		continue
	line = line.split()
	
	# batch id == seed
	seed = int(line[0])
	
	gen_id = int(line[1])
	
	pairs.append((seed, gen_id))
	
# Close id file
fd.close()

# Open the analyze file
afd = open(analyze_name, "w")

# Write intro
afd.write("# Analyze file autogenerated by linanalyze_generator.py\n")
afd.write("# For each seed and id, unzips and reads the population detail file\n")
afd.write("# and produces two lineages for each id:\n")
afd.write("# - lineage with saved fitness information\n")
afd.write("# - lineage with fitness recalculated in an unlimited-resource environment\n")
afd.write("\n\n")

# Loop through the seed/id pairs we have.  Produce two lineage files per seed.
for (seed, id) in sorted(pairs):
	detail_name = "$d/detail-historic-100000.spop"
	lineage_name = "$d/lineage_domEQU"
	
	afd.write("# Seed " + str(seed) + ", ID " + str(id) + "\n")
	afd.write("SET d " + os.path.abspath(experiment_name + "_" + str(seed) + "/data") + "\n\n")
	afd.write("SYSTEM gunzip " + detail_name + ".gz\n")
	afd.write("LOAD " + detail_name + "\n")
	afd.write("FIND_LINEAGE " + str(id) + "\n")
	afd.write("DETAIL " + lineage_name + "_norecalc.dat depth id parent_id length merit fitness gest_time update_born \n")
	afd.write("RECALCULATE\n")
	afd.write("DETAIL " + lineage_name + ".dat depth id parent_id length merit fitness fitness_ratio update_born task.0 task.1 task.2 task.3 task.4 task.5 task.6 task.7 task.8\n")
	afd.write("PURGE_BATCH\n")
	afd.write("SYSTEM gzip --best " + detail_name + "\n\n")
	
	print "Generated analyze instructions for seed " + str(seed) + ", id " + str(id)
	
afd.close()