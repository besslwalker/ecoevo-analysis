# Reads generates the necessary analyze script to generate phenotype files
# for EVERY. SINGLE. .SPOP file in EVERY. SINGLE. RUN. of this experiment.
# Ahahahaha have fun waiting for those to finish.
#
# Output scripts are named thus:
#		analyze-phen-ALL-<experiment_name>.cfg
#
# Analyze scripts will produce files named thus:
#		phenotypes-<run_name>-<seed>-<update>.dat
#
# BLW
# 12-6-11
# Basically a stripped-down version of phenanalyze_generator.py

import os.path
import os
import sys
from argparse import ArgumentParser

TOTAL_UPDATES = 100000
UPDATE_INTERVAL = 500

# Set up parser
# I like to use it just for the easy --help option even if I have no others
parser = ArgumentParser(description = "Generates an analyze file which produces phenotype files for every " + str(UPDATE_INTERVAL) + "-update .spop file in every run of the given experiment.")

parser.add_argument("experiment_name", metavar = "E",
					help = "The name of the experiment (e.g. unlimited-base).")
					
# Helper functions					

# We only know the experiment names, not the seeds.
# We deduce which directories hold data of interest by
# examining all files/directories next to this script, and selecting:
# 1. Things where the experiment name matches one of ours.
# 	 a. We deduce this by stripping off the final underscore 
#       and what follows it.
# 2. Things that end in a seed -- so we know it's a run.
#    b. We simply look at what we stripped.  Is it underscore + number?
def find_run_directories(exp_name):	
	run_dirs = [dir for dir in os.listdir('./') 
	            if "_".join(dir.split("_")[:-1]) == exp_name 
	            and dir.split("_")[-1].isdigit()]
	            
	return run_dirs

# Does all the actual work	
def write_config(experiment_name):
	analyze_name = "analyze-phen-" + experiment_name + "_ALL.cfg"
	phenotypes_output_dir = os.path.abspath(experiment_name + "_phenotypes")

	# Check for config directory
	if not os.path.exists("config"):
		print "Cannot find config directory; placing " + analyze_name + " in the current directory."
	else:
		analyze_name = "config/" + analyze_name
		
	afd = open(analyze_name, "w")

	# Write intro
	afd.write("# Analyze file autogenerated by phenanalyze_generator_ALL.py\n")
	afd.write("# For each seed and update (per update interval), unzips and reads the population detail file and produces a list of (task-signature) phenotypes, zipping population file again when finished.\n")
	afd.write("\n\n")
	
	# Create phenotypes directory
	afd.write("# Create directory to store phenotypes\n")
	afd.write("SYSTEM mkdir " + experiment_name + "_phenotypes\n\n")

	# Derive seeds from experiment name
	run_dirs = find_run_directories(experiment_name)
	seeds = [int(run_name.split("_")[-1]) for run_name in run_dirs]
	seeds.sort()
	
	afd.write("# For each run, generate the phenotypes at each " + str(UPDATE_INTERVAL) + " updates.\n")

	# Do we have a nice clean consecutive range of seeds?
	if len(seeds) == (seeds[-1] + 1) - seeds[0]:
		# Excellent, we can use FORRANGE.
		afd.write("FORRANGE s " + str(seeds[0]) + " " + str(seeds[-1]) + "\n")		
	else:
		# Darn.  Now we have to use FOREACH, which looks less elegant.
		seed_foreach_string = " ".join([str(seed) for seed in seeds])
		afd.write("FOREACH s " + seed_foreach_string + "\n")
		
	abspath = os.path.abspath(experiment_name)
	data_directory = abspath + "_$s/data"
	
	afd.write("\tFORRANGE u " + str(UPDATE_INTERVAL) + " " + str(TOTAL_UPDATES) + " " + str(UPDATE_INTERVAL) + "\n")
	
	population_filename = data_directory + "/detail-$u.spop"
	phenotypes_filename = phenotypes_output_dir + "/phenotypes-" + experiment_name + "-$s-$u.dat"
	
	afd.write("\t\tSYSTEM gunzip " + population_filename + ".gz\n")
	afd.write("\n")
	
	afd.write("\t\tLOAD " + population_filename + "\n")
	afd.write("\t\tRECALCULATE\n")
	afd.write("\t\tPRINT_PHENOTYPES " + phenotypes_filename + "\n\n")		
	
	afd.write("\t\tPURGE_BATCH\n")
	afd.write("\t\tSYSTEM gzip --best " + population_filename + "\n\n\n")
	
	afd.write("\tEND\n")
	
	afd.write("END\n\n")
		
	afd.close()
	

# Main
if __name__ == "__main__":
	args = parser.parse_args()
	args = vars(args)	# transform Namespace into dictionary
	
	experiment_name = args["experiment_name"]
	
	write_config(experiment_name)
	

